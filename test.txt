migration cmd :

go run migrations/migrate.go up


1. migrate :

    go run migrations/migrate.go down
    go run migrations/migrate.go up
    go run migrations/migrate.go status
    go run migrations/migrate.go version
    go run migrations/migrate.go create aritcles sql
    go run migrations/migrate.go create aritcles go
    

c + shift + p = > go test will generate unit test for function


* Blog (Soma)
* News (Aneek)
* Question/Answer (Amit) 
* Poll (Sohel)
* Library (Alamin)
* Ticket (Kamrul)
* Event Management (Mainul)
* MLM (Shoaib)
* Chat (Istiak)

Deadline: 24-06-2021 

Filter Tables



-- +goose Up
-- SQL in this section is executed when the migration is applied.
CREATE TABLE IF NOT EXISTS users
(
    id         serial             not null,
    first_name varchar(20)        not null,
    last_name  varchar(20)        not null,
    phone      varchar(11)        not null,
    username   varchar(20) unique not null,
    email      varchar(50) unique not null,
    password   varchar(255)       not null,
    is_active  boolean            default true,
    is_admin   boolean            default false,
    created_at timestamp default current_timestamp,
    updated_at  timestamp default current_timestamp,

    PRIMARY KEY (id)
);

-- +goose Up
-- +goose StatementBegin
CREATE TABLE IF NOT EXISTS speakers
(
    id         serial             not null,
    first_name varchar(20)        not null,
    last_name  varchar(20)        not null,
    phone      varchar(11)        not null,
    username   varchar(20)        unique not null,
    email      varchar(50)        unique not null,
    created_at timestamp default  current_timestamp,
    updated_at  timestamp default current_timestamp,

    PRIMARY KEY (id)
);
-- +goose StatementEnd

-- +goose Down
-- +goose StatementBegin
DROP TABLE IF EXISTS speakers;
-- +goose StatementEnd




-- +goose Down
-- SQL in this section is executed when the migration is rolled back.
DROP TABLE IF EXISTS users;




CREATE TABLE IF NOT EXISTS speakers
(
    id         serial ,
    first_name varchar(20)        not null,
    last_name  varchar(20)        not null,
    phone      varchar(11)        not null,
    address    varchar(200)       not null,
    username   varchar(20)        unique not null,
    email      varchar(50)        unique not null,
    created_at timestamp default  current_timestamp,
    updated_at  timestamp default current_timestamp,
  
  PRIMARY KEY(id)
);
​
CREATE TABLE IF NOT EXISTS event_type
(
    id                  serial,
    event_type_name     varchar(20)         not null,
    created_at          timestamp default   current_timestamp,
    updated_at          timestamp default   current_timestamp,
    PRIMARY KEY(id)
);
​
CREATE TABLE IF NOT EXISTS events
(  
    id                       serial,
    event_name               VARCHAR(160),
    speakers_id              INT REFERENCES speakers(id),
    event_type_id            INT REFERENCES event_type(id),
    start_time               timestamp,
    end_time                 timestamp,
    event_date               Date,
    per_person_price         INT,
    status                   boolean                   default true,
    created_at               timestamp default         current_timestamp,
    updated_at               timestamp default  current_timestamp,
    PRIMARY KEY(id)
);


SELECT 

	events.id, event_name,event_type_name,start_time,end_time,
    event_date,number_of_guest,per_person_price,first_name, last_name 

FROM events 

JOIN speakers ON events.speakers_id = speakers.id

JOIN event_type ON events.event_type_id = event_type.id;







package handler

import (
	"Event-Management-System-Go-PSQL/storage"
	"fmt"
	"log"
	"net/http"
)

type (
	feedBack struct {
		FeedBack []storage.FeedBack
	}
)

func (s *Server) getFeedBack(w http.ResponseWriter, r *http.Request) {

	tmp := s.templates.Lookup("feedback_list.html")

	if tmp == nil {
		log.Println("Unable to look feedback list.html")
		return
	}
	et, err := s.store.GetFeedBack()

	fmt.Printf("%+v", et)

	if err != nil {
		log.Println("Unable to get feedback.  ", err)
	}

	tempData := feedBack{
		FeedBack: et,
	}

	err = tmp.Execute(w, tempData)
	if err != nil {
		log.Println("Error executing tempalte:", err)
		return
	}
}


-- +goose Up
-- +goose StatementBegin
CREATE TABLE IF NOT EXISTS feedback
(  
    id                       serial,
    user_id                  INT REFERENCES users(id),
    feedback_message         VARCHAR(250),
    created_at               timestamp default          current_timestamp,
    updated_at               timestamp default          current_timestamp,
  	PRIMARY KEY(id)
);
-- +goose StatementEnd

-- +goose Down
-- +goose StatementBegin
DROP TABLE IF EXISTS feedback;
-- +goose StatementEnd


package postgres

import (
	"Event-Management-System-Go-PSQL/storage"
)

const ee = `SELECT feedback.id,username,email,feedback_message 

FROM feedback 

JOIN users ON feedback.user_id = users.id;`

func (s *Storage) GetFeedBack() ([]storage.FeedBack, error) {
	feedback := make([]storage.FeedBack, 0)
	if err := s.db.Select(&feedback, ee); err != nil {
		return nil, err
	}
	
	return feedback, nil
}


func (s *Server) speakerCreateProcesss(w http.ResponseWriter, r *http.Request) {
	createQuery := `INSERT INTO speakers (first_name, last_name, phone, address,username,email,created_at,updated_at) VALUES (:first_name, :last_name, :phone, :address,:username,:email,:created_at,:updated_at)`

	var bk storage.Speakers
	bk.FirstName = r.FormValue("first_name")
	bk.LastName = r.FormValue("last_name")
	bk.Phone = r.FormValue("phone")

}
r.HandleFunc("/speaker-create-process", s.speakerCreateProcesss).Methods("POST")





-- +goose Up
-- +goose StatementBegin
CREATE TABLE IF NOT EXISTS events
(  
    id                       serial,
    event_name               VARCHAR(160),
    speakers_id              INT REFERENCES speakers(id),
    event_type_id            INT REFERENCES event_type(id),
    start_time         		   timestamp,
    end_time 			           timestamp,
    event_date 				       timestamp,
    number_of_guest          INT,
    per_person_price         INT,
    status                   boolean                   default true,
    created_at               timestamp default         current_timestamp,
    updated_at               timestamp default         current_timestamp,
  	PRIMARY KEY(id)
);
-- +goose StatementEnd

-- +goose Down
-- +goose StatementBegin
DROP TABLE IF EXISTS events;
-- +goose StatementEnd





CREATE TABLE events(
  id serial,
  event_name							 VARCHAR(200) NOT NULL,
  speakers_id 						 int NOT NULL,
  event_type_id 					 int NOT NULL,
  start_time         		   timestamp,
  end_time 			           timestamp,
  event_date 				       timestamp,
  number_of_guest          INT,
  per_person_price         INT,
  status                   boolean                   default true,
  created_at               timestamp default         current_timestamp,
  updated_at               timestamp default         current_timestamp,
  PRIMARY KEY(id),
  CONSTRAINT speakers_id FOREIGN KEY(speakers_id) REFERENCES speakers(id),  
  CONSTRAINT event_type_id FOREIGN KEY(event_type_id) REFERENCES event_type(id)
  );
  