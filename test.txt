migration cmd :

go run migrations/migrate.go up


1. migrate :

    go run migrations/migrate.go down
    go run migrations/migrate.go up
    go run migrations/migrate.go status
    go run migrations/migrate.go version
    go run migrations/migrate.go create aritcles sql
    go run migrations/migrate.go create aritcles go
    

c + shift + p = > go test will generate unit test for function


* Blog (Soma)
* News (Aneek)
* Question/Answer (Amit) 
* Poll (Sohel)
* Library (Alamin)
* Ticket (Kamrul)
* Event Management (Mainul)
* MLM (Shoaib)
* Chat (Istiak)

Deadline: 24-06-2021 

Filter Tables



-- +goose Up
-- SQL in this section is executed when the migration is applied.
CREATE TABLE IF NOT EXISTS users
(
    id         serial             not null,
    first_name varchar(20)        not null,
    last_name  varchar(20)        not null,
    phone      varchar(11)        not null,
    username   varchar(20) unique not null,
    email      varchar(50) unique not null,
    password   varchar(255)       not null,
    is_active  boolean            default true,
    is_admin   boolean            default false,
    created_at timestamp default current_timestamp,
    updated_at  timestamp default current_timestamp,

    PRIMARY KEY (id)
);

-- +goose Up
-- +goose StatementBegin
CREATE TABLE IF NOT EXISTS speakers
(
    id         serial             not null,
    first_name varchar(20)        not null,
    last_name  varchar(20)        not null,
    phone      varchar(11)        not null,
    username   varchar(20)        unique not null,
    email      varchar(50)        unique not null,
    created_at timestamp default  current_timestamp,
    updated_at  timestamp default current_timestamp,

    PRIMARY KEY (id)
);
-- +goose StatementEnd

-- +goose Down
-- +goose StatementBegin
DROP TABLE IF EXISTS speakers;
-- +goose StatementEnd




-- +goose Down
-- SQL in this section is executed when the migration is rolled back.
DROP TABLE IF EXISTS users;




CREATE TABLE IF NOT EXISTS speakers
(
    id         serial ,
    first_name varchar(20)        not null,
    last_name  varchar(20)        not null,
    phone      varchar(11)        not null,
    address    varchar(200)       not null,
    username   varchar(20)        unique not null,
    email      varchar(50)        unique not null,
    created_at timestamp default  current_timestamp,
    updated_at  timestamp default current_timestamp,
  
  PRIMARY KEY(id)
);
​
CREATE TABLE IF NOT EXISTS event_type
(
    id                  serial,
    event_type_name     varchar(20)         not null,
    created_at          timestamp default   current_timestamp,
    updated_at          timestamp default   current_timestamp,
    PRIMARY KEY(id)
);
​
CREATE TABLE IF NOT EXISTS events
(  
    id                       serial,
    event_name               VARCHAR(160),
    speakers_id              INT REFERENCES speakers(id),
    event_type_id            INT REFERENCES event_type(id),
    start_time               timestamp,
    end_time                 timestamp,
    event_date               Date,
    per_person_price         INT,
    status                   boolean                   default true,
    created_at               timestamp default         current_timestamp,
    updated_at               timestamp default  current_timestamp,
    PRIMARY KEY(id)
);


SELECT 

	events.id, event_name,event_type_name,start_time,end_time,
    event_date,number_of_guest,per_person_price,first_name, last_name 

FROM events 

JOIN speakers ON events.speakers_id = speakers.id

JOIN event_type ON events.event_type_id = event_type.id;







package handler

import (
	"Event-Management-System-Go-PSQL/storage"
	"fmt"
	"log"
	"net/http"
)

type (
	feedBack struct {
		FeedBack []storage.FeedBack
	}
)

func (s *Server) getFeedBack(w http.ResponseWriter, r *http.Request) {

	tmp := s.templates.Lookup("feedback_list.html")

	if tmp == nil {
		log.Println("Unable to look feedback list.html")
		return
	}
	et, err := s.store.GetFeedBack()

	fmt.Printf("%+v", et)

	if err != nil {
		log.Println("Unable to get feedback.  ", err)
	}

	tempData := feedBack{
		FeedBack: et,
	}

	err = tmp.Execute(w, tempData)
	if err != nil {
		log.Println("Error executing tempalte:", err)
		return
	}
}


-- +goose Up
-- +goose StatementBegin
CREATE TABLE IF NOT EXISTS feedback
(  
    id                       serial,
    user_id                  INT REFERENCES users(id),
    feedback_message         VARCHAR(250),
    created_at               timestamp default          current_timestamp,
    updated_at               timestamp default          current_timestamp,
  	PRIMARY KEY(id)
);
-- +goose StatementEnd

-- +goose Down
-- +goose StatementBegin
DROP TABLE IF EXISTS feedback;
-- +goose StatementEnd


package postgres

import (
	"Event-Management-System-Go-PSQL/storage"
)

const ee = `SELECT feedback.id,username,email,feedback_message 

FROM feedback 

JOIN users ON feedback.user_id = users.id;`

func (s *Storage) GetFeedBack() ([]storage.FeedBack, error) {
	feedback := make([]storage.FeedBack, 0)
	if err := s.db.Select(&feedback, ee); err != nil {
		return nil, err
	}
	
	return feedback, nil
}


func (s *Server) speakerCreateProcesss(w http.ResponseWriter, r *http.Request) {
	createQuery := `INSERT INTO speakers (first_name, last_name, phone, address,username,email,created_at,updated_at) VALUES (:first_name, :last_name, :phone, :address,:username,:email,:created_at,:updated_at)`

	var bk storage.Speakers
	bk.FirstName = r.FormValue("first_name")
	bk.LastName = r.FormValue("last_name")
	bk.Phone = r.FormValue("phone")

}
r.HandleFunc("/speaker-create-process", s.speakerCreateProcesss).Methods("POST")





-- +goose Up
-- +goose StatementBegin
CREATE TABLE IF NOT EXISTS events
(  
    id                       serial,
    event_name               VARCHAR(160),
    speakers_id              INT REFERENCES speakers(id),
    event_type_id            INT REFERENCES event_type(id),
    start_time         		   timestamp,
    end_time 			           timestamp,
    event_date 				       timestamp,
    number_of_guest          INT,
    per_person_price         INT,
    status                   boolean                   default true,
    created_at               timestamp default         current_timestamp,
    updated_at               timestamp default         current_timestamp,
  	PRIMARY KEY(id)
);
-- +goose StatementEnd

-- +goose Down
-- +goose StatementBegin
DROP TABLE IF EXISTS events;
-- +goose StatementEnd





CREATE TABLE events(
  id serial,
  event_name							 VARCHAR(200) NOT NULL,
  speakers_id 						 int NOT NULL,
  event_type_id 					 int NOT NULL,
  start_time         		   timestamp,
  end_time 			           timestamp,
  event_date 				       timestamp,
  number_of_guest          INT,
  per_person_price         INT,
  status                   boolean                   default true,
  created_at               timestamp default         current_timestamp,
  updated_at               timestamp default         current_timestamp,
  PRIMARY KEY(id),
  CONSTRAINT speakers_id FOREIGN KEY(speakers_id) REFERENCES speakers(id),  
  CONSTRAINT event_type_id FOREIGN KEY(event_type_id) REFERENCES event_type(id)
  );
  
  working code for select id wise data with relation

SELECT 

	events.id, 
	event_name,
	event_type_name,
	event_start_time,
	event_end_time,
	event_date,
	number_of_guest,
	per_person_price,
	first_name,
	last_name

FROM events

JOIN speakers ON events.speakers_id = speakers.id
JOIN event_type ON events.event_type_id = event_type.id
WHERE events.id = 1


	/*
		r.HandleFunc("/event-type", s.getEventType).Methods("GET")
		r.HandleFunc("/event-type/create", s.createEventType).Methods("GET")
		r.HandleFunc("/event-type/create", s.saveEventType).Methods("POST")
	*/


	/* r.HandleFunc("/event/create", s.createEvent).Methods("GET")
	r.HandleFunc("/event/create", s.saveEvent).Methods("Post")
	r.HandleFunc("/event/show", s.eventDetails).Methods("GET") */



	//	r.Use(csrf.Protect([]byte("Secure and safe token"), csrf.Secure(false)))



<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Login</title>

    <link rel="stylesheet" href="/static/css/app.min.css" />
  </head>
  <body>
    <form action="/login" method="post">
      {{.CSRFField}}
      <div class="flex flex-col">
        <div>
          <label class="block" for="Email">Email</label>
          <input type="text" name="Email" class="border border-gray-500" value="{{.Form.Email}}" />
          {{with .FormErrors.Email}}
            <p>{{.}}</p>
           {{end}} 
        </div>
        
        <div>
          <label class="block" for="Password">Password</label>
          <input type="password" name="Password" class="border border-gray-500" value="{{.Form.Password}}" />
          {{with .FormErrors.Password}}
            <p>{{.}}</p>
           {{end}} 
        </div>

        <div class="item form-group">
            <label > Password<span class="required">*</span></label>
            <div class="col-md-6 col-sm-6 ">
                <input type="password" name="password" id="password" required="" onkeyup='check();' minlength="6" placeholder="min 6 character must be match" class="form-control" >
            </div>
        </div>


        <div class="item form-group">
            <label class="col-form-label col-md-3 col-sm-3 label-align">Retype Password<span class="required">*</span></label>
        <div class="col-md-6 col-sm-6 ">
            <input type="password" name="employee_password" id="employee_password" required="" onkeyup='check();'  minlength="6" placeholder="min 6 character must be match" class="form-control" >
        </div>

        <div>
          <button class="bg-green-600 px-4 py-2" type="submit">Login</button>
        </div>
      </div>
    </form>
  </body>
</html>


/* if form.Email != emailandPasswordStruct.Email {
			log.Fatalf("Email not match")
		}
		// password bcrypt
		hash, _ := bcrypt.GenerateFromPassword([]byte(form.Password), bcrypt.DefaultCost)
		/* 	if form.Password != emailandPasswordStruct.Password {
			   log.Fatalf("Password is not match")
		   }
		*/
		/* if err := bcrypt.CompareHashAndPassword(hash, []byte(emailandPasswordStruct.Password)); err != nil {
			log.Fatalf("Password does not match ")
		} */

// Booking events


CREATE TABLE IF NOT EXISTS booking(
    "id"                    serial,
    "event_id" 			    INT DEFAULT NULL,
    "user_id"               INT DEFAULT NULL,
    "number_of_ticket"      INT,
    "total_amount"          INT,
    "created_at"            timestamp default         current_timestamp,
    "updated_at"            timestamp default         current_timestamp,
  PRIMARY KEY(id),
  FOREIGN KEY(event_id) REFERENCES events(id),  
  FOREIGN KEY(user_id) REFERENCES users(id)
);


UPDATE events
SET ticket_remaining = ticket_remaining -5
WHERE ticket_remaining > 0 AND id = 1;


<!DOCTYPE html>
<html>
<body>

<h2>HTML Forms Add Event</h2>

<form action="/booking/create"  method="post">
  {{.CSRFField}}
    <label for="ID">Event Name</label><br>
    <select name="EventId"> 
        <option value="">-Select-</option>
        {{range .Event}}
            <option onclick="sum()" id="per_person_price" price="{{.PerPersonPrice}}" value="{{.ID}}">{{.EventName}}
                                         
            </option>

        {{end}}
    </select><br>


    <label name="NumberOfTicket">Number Of Ticket:</label><br>
    <input id= "ticket_number" type="text" name="NumberOfTicket" oninput="sum()" required="required"><br>
     {{with .FormErrors.NumberOfTicket}}
            <p>{{.}}</p>
           {{end}}
    <label name="TotalAmount">Total Calculated Amount:</label><br>
    <input id= "total_amount" type="text" name="TotalAmount" value=""><br>
    <input type="submit" value="Submit">
</form> 
</body>
<script>

function sum(){
  var val1 = document.getElementById('per_person_price').price;
  var val2 = document.getElementById('ticket_number').value;
  var sum = Number(val1) * Number(val2);
  console.log(val1);
  document.getElementById('total_amount').value = sum;
}

</script>
</html>








 <!DOCTYPE html>
<html>
<body>

<h2>HTML Forms Add Event</h2>

<form action="/booking/create"  method="post">
  {{.CSRFField}}
    <label >Event Name</label><br>
    <select name="EventId"  onchange="sum()" id="per_person_price" > 
        <option value="">-Select-</option>
        {{range .Event}}
            <option value="{{.PerPersonPrice}}">{{.EventName}}                      
            </option>

        {{end}}
    </select><br>


    <label name="NumberOfTicket">Number Of Ticket:</label><br>
    <input id= "ticket_number" type="text" name="NumberOfTicket" oninput="sum()" required="required"><br>
     {{with .FormErrors.NumberOfTicket}}
            <p>{{.}}</p>
           {{end}}
    <label name="TotalAmount">Total Calculated Amount:</label><br>
    <input id= "total_amount" type="text" name="TotalAmount" value=""><br>
    <input type="submit" value="Submit">
</form> 
</body>
<script>

function sum(){

  // var product_id = attr('product_id');
  var val1 = document.getElementById('per_person_price').value;
  var val2 = document.getElementById('ticket_number').value;
  var sum = Number(val1) * Number(val2);
  console.log(product_id);
  document.getElementById('total_amount').value = sum;
}

</script>
</html>




<!DOCTYPE html>
<html>
<body>

<h2>HTML Forms Add Event</h2>

    <h3>Event Date : {{.EventDate}}</h3>
    <h3>Event Name : {{.EventName}}</h3>
    <h3>EventStart Time : {{.EventStartTime}}</h3>
    <h3>Event End Time : {{.EventEndTime}}</h3>
    <h3>EventTypeName : {{.EventTypeName}}</h3>
    <h3>Per Person Price : {{.PerPersonPrice}}</h3>
    <h3>Speaker Name : {{.SpeakerFirstName}}  {{.SpeakerLastName}}</h3>
    <h3 id="demo"></h3>
    <h2> Ticket Remaining : {{.TicketRemaining}}</h2>

<form action="/booking/create/show"  method="post">
   
    <label name="NumberOfTicket">Number Of Ticket:</label><br>
    <input type="text" name="NumberOfTicket" required="required"><br>
     {{with .FormErrors.NumberOfTicket}}
            <p>{{.}}</p>
           {{end}}

    <label name="TotalAmount">Total Calculated Amount:</label><br>

    <input id= "total_amount" type="text" name="TotalAmount"><br>

    
    <input type="submit" value="Submit">
</form> 
</body>

</html>



/*--------------------------------------------------------------------------------POST : Save Booking With DropDown of Event----------------------------------------------*/
func (s *Server) saveBooking(w http.ResponseWriter, r *http.Request) {
	ParseFormData(r)
	var form storage.Booking
	if err := s.decoder.Decode(&form, r.PostForm); err != nil {
		log.Fatalln("Decoding error")
	}
	id := form.EventId
	t := IntToStringConversion(id)
	et, err := s.store.GetDataById(t)
	UnableToGetData(err)
	form.TotalAmount = form.NumberOfTicket * et.PerPersonPrice
	form.UserId = 1
	// decrement value as user's input
	_, err = s.store.DecrementRemainingTicketById(form.EventId, form.NumberOfTicket)
	// validation
	if err := form.Validate(); err != nil {
		vErrs := map[string]string{}
		if e, ok := err.(validation.Errors); ok {
			if len(e) > 0 {
				for key, value := range e {
					vErrs[key] = value.Error()
				}
			}
		}
		data := BookingFormData{
			CSRFField:  csrf.TemplateField(r),
			Form:       form,
			FormErrors: vErrs,
		}
		s.loadBookingTemplate(w, r, data)
		return
	}
	_, err = s.store.CreateBooking(form)
	fmt.Println("85 line pass")
	http.Redirect(w, r, "/booking/boucher", http.StatusSeeOther)
}



/*--------------------------------------------------------------------------------Load booking template with Dropdown of Event----------------------------------------------*/

func (s *Server) loadBookingTemplate(w http.ResponseWriter, r *http.Request, form BookingFormData) {
	tmpl := s.templates.Lookup("booking-form.html")
	UnableToFindHtmlTemplate(tmpl)
	ev, err := s.store.GetEvent()
	UnableToGetData(err)
	tempData := BookingFormData{
		Form:       storage.Booking{},
		FormErrors: map[string]string{},
		Event:      ev,
	}
	err = tmpl.Execute(w, tempData)
	ExcutionTemplateError(err)
}

/*-----------------------------------------------------------------------------GET : Booking form With Event Id/Show Booking Form----------------------------------------------*/
func (s *Server) createBooking(w http.ResponseWriter, r *http.Request) {
	log.Println("Booking : Create Method")
	data := BookingFormData{
		CSRFField: csrf.TemplateField(r),
	}
	s.loadBookingTemplate(w, r, data)
}


/*

func (s *Server) postLogin(w http.ResponseWriter, r *http.Request) {
	log.Println("Method: postLogin")
	ParseFormData(r)
	var form Login
	if err := s.decoder.Decode(&form, r.PostForm); err != nil {
		log.Fatalln("decoding error")
	}
	// validation
	if err := form.Validate(); err != nil {
		vErrs := map[string]string{}
		if e, ok := err.(validation.Errors); ok {
			if len(e) > 0 {
				for key, value := range e {
					vErrs[key] = value.Error()
				}
			}
		}
		data := LoginTempData{
			CSRFField:  csrf.TemplateField(r),
			Form:       form,
			FormErrors: vErrs,
		}
		s.loadLoginTemplate(w, r, data)
		return
	}

	/* 	// call database for match email and password
	   	if err = bcrypt.CompareHashAndPassword([]byte(form.Password), []byte(creds.Password)); err != nil {
	   		// If the two passwords don't match, return a 401 status
	   		w.WriteHeader(http.StatusUnauthorized)
	   	} */
/*
		   emailandPasswordStruct := s.store.GetUserEmailAndPass(form.Email, form.Password)
		   Session_User_ID := emailandPasswordStruct.ID //user id
		   Session_Is_Admin := emailandPasswordStruct.IsAdmin

		   if emailandPasswordStruct.Email == "" && emailandPasswordStruct.Password == "" {
			   http.Redirect(w, r, "/login", http.StatusSeeOther)
		   }

		   if emailandPasswordStruct.IsAdmin == true {
			   session, _ := s.session.Get(r, "event_management_app")
			   session.Values["user_id"] = Session_User_ID
			   session.Values["is_admin"] = Session_Is_Admin
			   err := session.Save(r, w)
			   if err != nil {
				   http.Error(w, err.Error(), http.StatusInternalServerError)
				   return
			   }
			   fmt.Println("Your are Admin")
			   http.Redirect(w, r, "/auth/admin-home", http.StatusSeeOther) // admin
		   }

		   if emailandPasswordStruct.IsAdmin == false {
			   session, _ := s.session.Get(r, "event_management_app")
			   session.Values["user_id"] = Session_User_ID
			   session.Values["is_admin"] = Session_Is_Admin
			   if err := session.Save(r, w); err != nil {
				   log.Fatalln("error while saving user id into session")
			   }
			   fmt.Println("You are user")
			   http.Redirect(w, r, "/event", http.StatusSeeOther) // user index
			   fmt.Println("This is user : hendler/login.go")
		   }

	   }
*/

